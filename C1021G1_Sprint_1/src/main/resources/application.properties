Query native database

	@Query(value = "SELECT * FROM customer where `name` like %:name% and gender = :gender ",nativeQuery = true)
    List<Customer> searchByNameCustomerContainingAndGender(@Param("name") String name,@Param("gender") Boolean gender);

    @Query(value = "SELECT * FROM customer where `name` like %:name% ",nativeQuery = true)
    List<Customer> searchByNameCustomerContaining(@Param("name") String name);

-->Tại controller nhận tham số từ angular gửi qua
  @GetMapping(value = "/search")
    public ResponseEntity<List<Customer>> searchAllCustomersByNameAndGender(@RequestParam(name = "name", defaultValue = "") String name,
                                                                            @RequestParam(name = "gender", defaultValue = "", required = false) String gender) {
        System.out.println(gender);
        List<Customer> customers ;
        Boolean bl = false;
        if (gender.equals("false")) {
            customers = customerService.searchByNameAndGender(name, bl);
        } else if (gender.equals("true")) {
            bl = true;
            customers = customerService.searchByNameAndGender(name, bl);
        } else{
            customers =customerService.searchByName(name);
        }
        System.out.println("gender"+gender);
            if (customers.isEmpty()) {
                return new ResponseEntity<>(HttpStatus.NO_CONTENT);//You many decide to return HttpStatus.NOT_FOUND
            }
        return new ResponseEntity<>(customers, HttpStatus.OK);
    }

--> Service tại angular

constructor(private http : HttpClient) {
  }

  getAll():Observable<Customer[]>{
    return this.http.get<Customer[]>(API_URL);
  }

  findByID(id: number):Observable<Customer>{
    return this.http.get<Customer>(`${API_URL}/${id}`);
  }
  delete(id:number):Observable<Customer>{
    return this.http.delete<Customer>(`${API_URL}/${id}`);
  }
  update(id:number, customer:Customer):Observable<Customer>{
    return this.http.put<Customer>(`${API_URL}/${id}`,customer);
  }
  addNew(customer:Customer):Observable<Customer>{
    return this.http.post<Customer>(API_URL,customer);
  }
  seacrch(name: string,gender: string):Observable<Customer[]>{
    return this.http.get<Customer[]>(`${API_URL}`+'/search'+'?name='+name + '&gender='+ gender )
  }